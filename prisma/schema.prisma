generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  orders    Order[]
  profile   Profile?
  reviews   Review[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  bio         String?
  avatarUrl   String?
  country     String?
  dateOfBirth DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id            String       @id @default(cuid())
  title         String       @unique
  description   String
  price         Float
  releaseDate   DateTime
  developer     String
  publisher     String
  coverImageUrl String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  cartItems     CartItem[]
  genres        GameGenre[]
  orderItems    OrderItem[]
  reviews       Review[]
  screenshots   Screenshot[]
}

model Genre {
  id        String      @id @default(cuid())
  name      String      @unique
  parentId  String?
  games     GameGenre[]
  parent    Genre?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  subGenres Genre[]     @relation("ParentChild")
}

model GameGenre {
  gameId  String
  genreId String
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([gameId, genreId])
}

model Screenshot {
  id       String  @id @default(cuid())
  gameId   String
  imageUrl String
  caption  String?
  game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id       String   @id @default(cuid())
  cartId   String
  gameId   String
  quantity Int      @default(1)
  addedAt  DateTime @default(now())
  cart     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([cartId, gameId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Float
  status      String      @default("COMPLETED")
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  items       OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  gameId   String
  price    Float
  quantity Int
  game     Game   @relation(fields: [gameId], references: [id], onDelete: NoAction)
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
